@startuml(id=Mobile_App_Component_View)
scale max 2000x2000
title Internet Banking System - Mobile App - Components
caption Mobile App Component View

skinparam {
  shadowing false
  arrowColor #707070
  actorBorderColor #707070
  componentBorderColor #707070
  rectangleBorderColor #707070
  noteBackgroundColor #ffffff
  noteBorderColor #707070
}
rectangle 29 <<Container>> #dddddd [
  API Gateway
  --
  API Gateway: AWS API Gateway
  / Spring Cloud
]
rectangle 25 <<Container>> #dddddd [
  Audit Database
  --
  Audit Database: SQL DB
]
rectangle 9 <<Person>> #dddddd [
  Bank Client
  --
  Bank Client
]
rectangle 33 <<Container>> #dddddd [
  Banking Core Facade App
  --
  Banking Core Facade App:
  Spring Boot
]
rectangle 1 <<Software System>> #dddddd [
  Banking Core System
  --
  Banking Core System
]
rectangle 8 <<Software System>> #dddddd [
  Monitoring System
  --
  Monitoring System: Prometheus
]
rectangle 31 <<Container>> #dddddd [
  Movements App
  --
  Movements App: Spring Boot
]
rectangle 27 <<Container>> #dddddd [
  Notifications App
  --
  Notifications Service: Spring
  Boot
]
rectangle 3 <<Software System>> #dddddd [
  Notifications System
  --
  Notifications System
]
rectangle 28 <<Container>> #dddddd [
  Notifications sender App
  --
  Queues notifications: Java,
  Messaging suite, Spring Boot
]
rectangle 5 <<Software System>> #dddddd [
  OAuth2 Authentication Provider
  --
  OAuth2 Authentication
  Provider
]
rectangle 6 <<Software System>> #dddddd [
  Onboarding Provider
  --
  Onboarding Provider
]
rectangle 7 <<Software System>> #dddddd [
  Services Orchestrator
  --
  Services Orchestrator:
  Kubernetes / Spring Cloud /
  AWS EKS
]
rectangle 26 <<Container>> #dddddd [
  Top clients Database
  --
  Top clients Database: High
  Availability Database Cluster
]
rectangle 32 <<Container>> #dddddd [
  Transfer App
  --
  Transfer App: Spring Boot
]
rectangle 30 <<Container>> #dddddd [
  User Info App
  --
  User Info App: Spring Boot
]
rectangle 2 <<Software System>> #dddddd [
  User Information System
  --
  User Information System
]
rectangle 23 <<Container>> #dddddd [
  Web Single Page App
  --
  Web Single Page App:
  React/Angular
]
package "Mobile App" <<Container>> {
  component 106 <<Component>> #dddddd [
    Device File System
    --
    Device File System for
    uploading required id card
    for onboarding
  ]
  component 107 <<Component>> #dddddd [
    Face Recognition Component
    --
    Face Recognition component
    for onboarding
  ]
  component 102 <<Component>> #dddddd [
    Home Component
    --
    Contains main options for the
    user
  ]
  component 100 <<Component>> #dddddd [
    Login Component
    --
    Authenticates and authorizes
    user
  ]
  component 105 <<Component>> #dddddd [
    Login methods Component
    --
    Login methods
  ]
  component 104 <<Component>> #dddddd [
    Movements Component
    --
    Queries movements
  ]
  component 99 <<Component>> #dddddd [
    Onboarding Component
    --
    Component for onboarding and
    registering device
  ]
  component 101 <<Component>> #dddddd [
    Security Component
    --
    Checks if the user and device
    are registered and verified
  ]
  component 103 <<Component>> #dddddd [
    Transfer Component
    --
    Makes transfers
  ]
}
29 .[#707070].> 31 : Publish services provided by
29 .[#707070].> 27 : Publish services provided by
29 .[#707070].> 32 : Publish services provided by
29 .[#707070].> 30 : Publish services provided by
9 .[#707070].> 101 : User starts application, application launches the
9 .[#707070].> 23 : Uses the web single page app to make transactions, query movements
33 .[#707070].> 1 : Query movements from 
33 .[#707070].> 1 : Make transactions in 
102 .[#707070].> 29 : App loads Authorized user information using
102 .[#707070].> 104 : Authorized user can query movements using
102 .[#707070].> 103 : Authorized user can make transfers using
100 .[#707070].> 102 : After a successful login, user can access to the options in
100 .[#707070].> 105 : Gets login information, i.e. username and password, fingerprint, temporal password, from
100 .[#707070].> 5 : Authenticates user using
8 .[#707070].> 7 : Executes system monitoring
31 .[#707070].> 25 : Stores transaction history 
31 .[#707070].> 33 : Query movements from 
104 .[#707070].> 29 : Queries movements using
27 .[#707070].> 28 : Send required notifications to
3 .[#707070].> 9 : Delivers notifications to
28 .[#707070].> 3 : Queues notifications and requests them to
99 .[#707070].> 106 : Uploads user identification for face recognition using
99 .[#707070].> 107 : Captures face recognition from device using
99 .[#707070].> 6 : Sends onboarding data for verification to
99 .[#707070].> 101 : After a successful onboarding, notifies to
6 .[#707070].> 99 : Notifies successful or failed verification
101 .[#707070].> 100 : If device and user are registered and verified, invokes login process in
101 .[#707070].> 99 : Checks if device and user are registered and verified in
101 .[#707070].> 99 : If device and user are not registered and verified, invokes onboarding process in
32 .[#707070].> 25 : Stores transaction history 
32 .[#707070].> 33 : Make transactions in 
103 .[#707070].> 29 : Makes transfers using
30 .[#707070].> 33 : Gets user info from 
30 .[#707070].> 26 : Stores top clients info in high availability DB 
30 .[#707070].> 2 : Gets user information from 
23 .[#707070].> 29 : Make API service calls to get user information, execute transactions, query movements
23 .[#707070].> 5 : Authenticates user using Authorization Code Flow with Proof Key for Code Exchange
@enduml
